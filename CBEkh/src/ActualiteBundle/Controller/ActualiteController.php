<?php

namespace ActualiteBundle\Controller;

use ActualiteBundle\Entity\Actualite;
use ActualiteBundle\Entity\Genre;
use ActualiteBundle\Form\ActualiteType;
use Doctrine\Common\Persistence\PersistentObject;
use MongoDB\BSON\Type;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpFoundation\Request;
use CMEN\GoogleChartsBundle\GoogleCharts\Charts\PieChart;

/**
 * Actualite controller.
 *
 * @Route("actualite")
 */
class ActualiteController extends Controller
{
    /**
     * Lists all actualite entities.
     *
     * @Route("/", name="actualite_index")
     * @Method("GET")
     */
    public function indexAction()
    {
        $em = $this->getDoctrine()->getManager();

        $actualites = $em->getRepository('ActualiteBundle:Actualite')->findAll();

        return $this->render('actualite/index.html.twig', array(
            'actualites' => $actualites,
        ));
    }

    /**
     * Creates a new actualite entity.
     *
     * @Route("/new", name="actualite_new")
     * @Method({"GET", "POST"})
     */

    public function newAction(Request $request)
    {

        $actualite = new Actualite();
        $form = $this->createForm(ActualiteType::class, $actualite);
      //  $cat = $this->getDoctrine()->getRepository(Categorie::class)->find($id);
   //     $actualite->setIdCategorie($cat);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            /**
             * @Var UploadedFile $file
             */
            $actualite->uploadProfilePicture();

            $actualite->setDate(new \DateTime());
            $actualite->setNbClick(0);
            $actualite->setEtat(1);
            $em = $this->getDoctrine()->getManager();
            $em->persist($actualite);
            $em->flush();
            return $this->redirectToRoute('actualite_affiche',array('id' => $actualite->getId()));
        }

        return $this->render('@Actualite/Actualite/new.html.twig', array('form' => $form->createView()));
    }


    public function userAction(Request $request)
    {

        $actualite = new Actualite();
        $form = $this->createForm(ActualiteType::class, $actualite);
       // $cat = $this->getDoctrine()->getRepository(Categorie::class)->find($id);
      //  $actualite->setIdCategorie($cat);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            /**
             * @Var UploadedFile $file
             */
            $actualite->uploadProfilePicture();

            $actualite->setDate(new \DateTime());
            $actualite->setNbClick(0);
            $actualite->setEtat(1);
            $em = $this->getDoctrine()->getManager();
            $em->persist($actualite);
            $em->flush();
            return $this->redirectToRoute('actualite_front', array('id' => $actualite->getId()));
        }

        return $this->render('@Actualite/Actualite/user.html.twig', array('form' => $form->createView()));
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }


    public function showAction()
    {
        $actualite = $this->getDoctrine()->getRepository(actualite::class)->findAll();
        //$actualite = $this->getDoctrine()->getRepository(actualite::class)->findBy(array('idCategorie'=>$id));
        return $this->render("@Actualite/Actualite/show.html.twig", array('actualite' => $actualite));
    }


    /**
     * Displays a form to edit an existing actualite entity.
     *
     * @Route("/{id}/edit", name="actualite_edit")
     * @Method({"GET", "POST"})
     */
    public function editAction(Request $request, $id)
    {

        /*  $actualite=$this->getDoctrine()->getRepository(Actualite::class)->find($id);
          $form=$this->createForm(ActualiteType::class,$actualite);
          $form->handleRequest($request);
          if ( $form->isValid()) {
              $em = $this->getDoctrine()->getManager();
              $em->flush();
              return $this->redirectToRoute('actualite_affiche');
          }
          return $this->render('@Actualite/Actualite/edit.html.twig', array(

              'form_modif' => $form->createView()

          ));*/
        $actualite = $this->getDoctrine()->getRepository(Actualite::class)->find($id);
        // $cat=$actualite->getIdCategorie();
        // $id_cat=$cat->getId() ? $cat->getId() : '';
        $form = $this->createForm(ActualiteType::class, $actualite);
        $form->handleRequest($request);
        if ($form->isValid()) {
            $actualite->uploadProfilePicture();
            $actualite->getEtat();
            $em = $this->getDoctrine()->getManager();
            $em->flush();
            return $this->redirectToRoute("actualite_affiche", array('id' => $id));
        }
        return $this->render("@Actualite/Actualite/edit.html.twig", array('form_modif' => $form->createView(), 'id_cat' => $id));
    }


    public function actualiteEnCourAction()
    {
        $user = $this->container->get('security.token_storage')->getToken()->getUser();
        $actualite = $this->getDoctrine()->getRepository(Actualite::class)->ActualiteEnCour();

        return $this->render("@Actualite/Actualite/show.html.twig", array('actualite' => $actualite, 'user' => $user));
    }

    public function traiterAction($id)
    {
        $user = $this->container->get('security.token_storage')->getToken()->getUser();
        $actualite = $this->getDoctrine()->getRepository(Actualite::class)->find($id);
        $actualite->setEtat(0);
        $em = $this->getDoctrine()->getManager();
        //   $em->remove($actualite);
        $em->flush();

        return $this->redirectToRoute("actualite_affiche", array('user' => $user, 'id' => $id));
    }


    public function listerActualiteFrontAction()
    {
        $user = $this->container->get('security.token_storage')->getToken()->getUser();

        $actualite = $this->getDoctrine()->getRepository(Actualite::class)->listeractualite();
        $genre = $this->getDoctrine()->getRepository(Genre::class)->findAll();

        return $this->render('@Actualite/Actualite/list.html.twig', array('actualite' => $actualite, 'user' => $user));
    }

    /**
     * Deletes a actualite entity.
     *
     * @Route("/{id}", name="actualite_delete")
     * @Method("DELETE")
     */
    public function deleteAction($id)
    {
        $user = $this->container->get('security.token_storage')->getToken()->getUser();
        $actualite = $this->getDoctrine()->getRepository(Actualite::class)->find($id);
        // $cat=$actualite->getIdCategorie();
        // $id_cat=$cat->getId() ? $cat->getId() : '';
        $em = $this->getDoctrine()->getManager();
        $em->remove($actualite);
        $em->flush();
        return $this->redirectToRoute("actualite_affiche", array('user' => $user, 'id' => $id));
    }

    /**
     * Creates a form to delete a actualite entity.
     *
     * @param Actualite $actualite The actualite entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm(Actualite $actualite)
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('actualite_delete', array('id' => $actualite->getId())))
            ->setMethod('DELETE')
            ->getForm();
    }


    public function nb_clickAction($id)
        /*   {
               $actualite = $this->getDoctrine()->getRepository(Actualite::class)->find($id);
               //$actualite->setNbClick($actualite->getNbClick()+1);
               $actualite->setNbClick($actualite->getNbClick() + 1);


               $em = $this->getDoctrine()->getManager();
               $em->flush();
               $url = $actualite->getTitre();
               return $this->redirect($url);


           }}*/
    {
        $em = $this->getDoctrine()->getManager();
        $actualite = $em->getRepository(Actualite::class)->find($id);

        $actualite->setNbClick($actualite->getNbClick() + 1);
        $em->persist($actualite);
        $em->flush();
        //$url=$actualite->getTitre();
        // return $this->redirect($url);
        return $this->redirectToRoute('actualite_front', array('id' => $actualite->getId()));


    }

    public function chartAction()
    {
        $pieChart = new PieChart();



        $data = $this->getDoctrine()->getRepository(Actualite::class)->findAll();
        $id = 0;
        $nombrevus = 0;

        foreach ($data as $item) {
            $id+= $item->getId();
        $nombrevus+= $item->getNbClick();
    }

        $pieChart = new PieChart();
        $pieChart->getData()->setArrayToDataTable([
            [ 'Task', 'Hours per Day' ],
            [ 'ACTUALITE', $id ],
            [ 'NOMBRE DE VUS', $nombrevus ]
        ]);

        $pieChart->getOptions()->setTitle('Nombre de Vus Par ActualitÃ©');
        $pieChart->getOptions()->setHeight(500);
        $pieChart->getOptions()->setWidth(900);
        $pieChart->getOptions()->getTitleTextStyle()->setBold(true);
        $pieChart->getOptions()->getTitleTextStyle()->setColor('#009900');
        $pieChart->getOptions()->getTitleTextStyle()->setItalic(true);
        $pieChart->getOptions()->getTitleTextStyle()->setFontName('Arial');
        $pieChart->getOptions()->getTitleTextStyle()->setFontSize(20);

        return $this->render('@Actualite/Actualite/chart.html.twig', array('piechart' => $pieChart));
    }


}






